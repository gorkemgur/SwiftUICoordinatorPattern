#!/bin/bash

# SwiftUI Coordinator Module Template Installer

# Renkli mesajlar
BLUE='\033[0;34m'
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Başlık
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  SwiftUI Coordinator Module Template   ${NC}"
echo -e "${BLUE}            Installer                   ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Şablon dizini
TEMPLATE_DIR=~/Library/Developer/Xcode/Templates/File\ Templates/SwiftUI
TEMPLATE_NAME=Coordinator\ Module.xctemplate

# Şablon hedef dizini
TEMPLATE_PATH="${TEMPLATE_DIR}/${TEMPLATE_NAME}"

# Şablon dizinini oluştur
echo -e "${YELLOW}Şablon dizini oluşturuluyor...${NC}"
mkdir -p "${TEMPLATE_DIR}/${TEMPLATE_NAME}"

if [ $? -ne 0 ]; then
    echo -e "${RED}Dizin oluşturma hatası. Erişim iznini kontrol edin.${NC}"
    exit 1
fi

# TemplateInfo.plist oluştur
echo -e "${YELLOW}TemplateInfo.plist oluşturuluyor...${NC}"
cat > "${TEMPLATE_DIR}/${TEMPLATE_NAME}/TemplateInfo.plist" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>AllowedTypes</key>
    <array>
        <string>public.swift-source</string>
    </array>
    <key>Platforms</key>
    <array>
        <string>com.apple.platform.iphoneos</string>
    </array>
    <key>DefaultCompletionName</key>
    <string>SwiftCoordinatorModule</string>
    <key>Description</key>
    <string>Swift Coordinator module template. Creates Coordinator, View, ViewModel, and Destination enum.</string>
    <key>Kind</key>
    <string>Xcode.IDEKit.TextSubstitutionFileTemplateKind</string>
    <key>MainTemplateFile</key>
    <string>___FILEBASENAME___</string>
    <key>SortOrder</key>
    <integer>1</integer>
    <key>Options</key>
    <array>
        <dict>
            <key>Description</key>
            <string>Name of module that you need create</string>
            <key>Default</key>
            <string></string>
            <key>Identifier</key>
            <string>moduleName</string>
            <key>Name</key>
            <string>Module name</string>
            <key>Required</key>
            <string>YES</string>
            <key>Type</key>
            <string>text</string>
        </dict>
        <dict>
            <key>Default</key>
            <string>___VARIABLE_moduleName___</string>
            <key>Identifier</key>
            <string>productName</string>
            <key>Type</key>
            <string>static</string>
        </dict>
    </array>
    <key>Template Author</key>
    <string>Görkem Gür</string>
</dict>
</plist>
EOF

# ___VARIABLE_moduleName___Coordinator.swift oluştur
echo -e "${YELLOW}___VARIABLE_moduleName___Coordinator.swift oluşturuluyor...${NC}"
cat > "${TEMPLATE_DIR}/${TEMPLATE_NAME}/___VARIABLE_moduleName___Coordinator.swift" << 'EOF'
//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright © ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by ___FULLUSERNAME___
//

import SwiftUI
import Combine

final class ___VARIABLE_moduleName___Coordinator: Coordinator {
    @Published var navigationPath = NavigationPath()
    @Published var isSheetPresented = false
    @Published var sheetContent: AnyView?
    @Published var isFullscreenPresented = false
    
    func navigate(to destination: ___VARIABLE_moduleName___Destination) {
        navigationPath.append(destination)
    }
}
EOF

# ___VARIABLE_moduleName___Destination.swift oluştur
echo -e "${YELLOW}___VARIABLE_moduleName___Destination.swift oluşturuluyor...${NC}"
cat > "${TEMPLATE_DIR}/${TEMPLATE_NAME}/___VARIABLE_moduleName___Destination.swift" << 'EOF'
//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright © ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by ___FULLUSERNAME___
//

import Foundation

enum ___VARIABLE_moduleName___Destination: Hashable { }
EOF

# ___VARIABLE_moduleName___View.swift oluştur
echo -e "${YELLOW}___VARIABLE_moduleName___View.swift oluşturuluyor...${NC}"
cat > "${TEMPLATE_DIR}/${TEMPLATE_NAME}/___VARIABLE_moduleName___View.swift" << 'EOF'
//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright © ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by ___FULLUSERNAME___
//

import SwiftUI

struct ___VARIABLE_moduleName___View: View {
    @StateObject private var coordinator: ___VARIABLE_moduleName___Coordinator
    @StateObject private var viewModel: ___VARIABLE_moduleName___ViewModel
    
    init(coordinator: ___VARIABLE_moduleName___Coordinator, viewModel: ___VARIABLE_moduleName___ViewModel) {
        self._coordinator = StateObject(wrappedValue: coordinator)
        self._viewModel = StateObject(wrappedValue: viewModel)
    }
    
    var body: some View {
        NavigationStack(path: $coordinator.navigationPath) {
            VStack {
                Text("___VARIABLE_moduleName___")
            }
            .navigationDestination(for: ___VARIABLE_moduleName___Destination.self) { destination in
            }
            .navigationTitle("___VARIABLE_moduleName___")
            /* If you should use sheet uncomment it
            .sheet(isPresented: $coordinator.isSheetPresented) {
                coordinator.sheetContent
            }
            */
            
        }
    }
}
EOF

# ___VARIABLE_moduleName___ViewModel.swift oluştur
echo -e "${YELLOW}___VARIABLE_moduleName___ViewModel.swift oluşturuluyor...${NC}"
cat > "${TEMPLATE_DIR}/${TEMPLATE_NAME}/___VARIABLE_moduleName___ViewModel.swift" << 'EOF'
//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright © ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by ___FULLUSERNAME___
//

import Foundation
import Combine

final class ___VARIABLE_moduleName___ViewModel: ObservableObject { }
EOF

# İkon dosyasını kopyala
echo -e "${YELLOW}Şablon ikonu kopyalanıyor...${NC}"

# Script ile aynı dizindeki TemplateIcon.icns dosyasını template klasörüne kopyala
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cp "${SCRIPT_DIR}/TemplateIcon.icns" "${TEMPLATE_DIR}/${TEMPLATE_NAME}/TemplateIcon.icns"

# TemplateInfo.plist dosyasında ikon ismini güncelle (png yerine icns kullan)
sed -i '' 's/TemplateIcon.png/TemplateIcon.icns/g' "${TEMPLATE_DIR}/${TEMPLATE_NAME}/TemplateInfo.plist"

echo -e "${GREEN}Xcode Cache Dataları Siliniyor..${NC}"
rm -rf ~/Library/Developer/Xcode/DerivedData
rm -rf ~/Library/Caches/com.apple.dt.Xcode
echo -e "${BLUE}Xcode Cache Dataları Silindi!${NC}"

# Kurulum tamamlandı
echo -e "${GREEN}SwiftUI Coordinator Module Template başarıyla kuruldu!${NC}"
echo -e "${YELLOW}NOT: Şablonu kullanmak için Xcode'u yeniden başlatın.${NC}"
echo ""
echo -e "${BLUE}Kullanım:${NC}"
echo "1. Xcode'da projenizde bir klasöre sağ tıklayın"
echo "2. 'New File...' seçeneğini seçin"
echo "3. 'SwiftUI' bölümünü bulun"
echo "4. 'Coordinator Module' şablonunu seçin"
echo "5. Modül adını girin ve 'Create' butonuna tıklayın"
echo ""
echo -e "${BLUE}========================================${NC}"
